name: Update Submodules and Publish

on:
  workflow_dispatch:
  repository_dispatch:
    types: [update-submodules]
  push:
    branches:
      - gh-pages-source

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  update-submodules:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: gh-pages-source
          submodules: recursive
          fetch-depth: 0

      - name: Force changes_detected when manually triggered
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: echo "changes_detected=true" >> $GITHUB_ENV

      - name: Set Git user identity
        run: |
          git config --global user.name "Eclipse Keyple Bot"
          git config --global user.email "${{ github.repository }}-bot@eclipse.org"

      - name: Update Git submodules and clean versions
        id: commit
        run: |
          # If the workflow has been started manually, skip detection.
          if [[ "${{ env.changes_detected }}" == "true" ]]; then
            echo "Manual trigger detected â€” skipping submodule change check."
            exit 0
          fi

          git submodule update --init --recursive --remote

          # Convert submodules to regular directories by copying content
          echo "Converting submodules to regular directories..."

          # Create a temporary directory for clean content
          TEMP_DIR=$(mktemp -d)
          echo "Temporary directory: $TEMP_DIR"

          # Copy all content except .git directories and .gitmodules
          echo "Copying content to temporary directory..."
          rsync -av --exclude='.git' --exclude='.gitmodules' ./ "$TEMP_DIR/"

          # Copy .gitmodules for next run
          cp .gitmodules "$TEMP_DIR/.gitmodules"

          # Get current commit hash for reference
          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "Source commit: $CURRENT_COMMIT"

          # Remove all files from git index (but keep .git)
          git rm -rf .
          rm -rf .gitmodules .git/modules

          # Copy back the clean content
          cp -r "$TEMP_DIR"/* "$TEMP_DIR"/.* . 2>/dev/null || true

          # Clean up temp directory
          rm -rf "$TEMP_DIR"

          # Add everything as regular files
          git add -A

          # Clean old patch versions
          echo "Cleaning old patch versions..."
          for module in *; do
            if [ -d "$module" ]; then
              # Skip special directories
              if [[ "$module" == ".git" ]] || [[ "$module" == "_layouts" ]] || [[ "$module" == ".github" ]] || [[ "$module" == ".idea" ]]; then
                continue
              fi

              echo "Processing module: $module"

              # Find all version directories (matching X.Y.Z pattern)
              declare -A version_groups

              for version_dir in "$module"/*/; do
                if [ -d "$version_dir" ]; then
                  version_name=$(basename "$version_dir")

                  # Check if it matches semver pattern (X.Y.Z)
                  if [[ "$version_name" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
                    major="${BASH_REMATCH[1]}"
                    minor="${BASH_REMATCH[2]}"
                    patch="${BASH_REMATCH[3]}"
                    group_key="${major}.${minor}"

                    # Store or update the highest patch version for this group
                    if [[ -z "${version_groups[$group_key]}" ]]; then
                      version_groups[$group_key]="$patch:$version_name"
                    else
                      current_patch=$(echo "${version_groups[$group_key]}" | cut -d: -f1)
                      if (( patch > current_patch )); then
                        version_groups[$group_key]="$patch:$version_name"
                      fi
                    fi
                  fi
                fi
              done

              # Create a list of versions to keep
              declare -A keep_versions
              for group in "${!version_groups[@]}"; do
                version_to_keep=$(echo "${version_groups[$group]}" | cut -d: -f2)
                keep_versions[$version_to_keep]=1
                echo "Keeping $module/$version_to_keep (highest patch for $group)"
              done

              # Delete versions not in the keep list
              for version_dir in "$module"/*/; do
                if [ -d "$version_dir" ]; then
                  version_name=$(basename "$version_dir")

                  # Check if it is a semver version
                  if [[ "$version_name" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                    if [[ -z "${keep_versions[$version_name]}" ]]; then
                      echo "Deleting $module/$version_name"
                      rm -rf "$version_dir"
                    fi
                  else
                    echo "Preserving special directory: $module/$version_name"
                  fi
                fi
              done

              # Clean up arrays
              unset version_groups
              unset keep_versions
            fi
          done

          # Add and commit everything
          git add .
          COMMIT_MSG="Update submodules and clean old patch versions"
          if [[ -n $(git status --porcelain) ]]; then
            git commit -m "$COMMIT_MSG"
            echo "changes_detected=true" >> $GITHUB_ENV
          else
            echo "No changes to commit"
            echo "changes_detected=false" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Process UML documentation
        if: env.changes_detected == 'true'
        run: |
          echo "Processing UML documentation..."

          # Step 1: Delete all folders containing "-uml" in gh-pages
          echo "Deleting existing -uml folders..."
          for dir in *-uml*/; do
            if [ -d "$dir" ]; then
              echo "Deleting $dir"
              rm -rf "$dir"
            fi
          done

          # Step 2: Process all modules (not as git submodules)
          echo "Processing modules..."
          for module in *; do
            if [ -d "$module" ]; then
              echo "Checking module: $module"
          
              # Check if module name contains "-java-" or "kmp"
              if [[ "$module" == *"-java-"* ]] || [[ "$module" == *"kmp"* ]]; then
                echo "Processing module: $module"

                # Determine the UML folder name
                if [[ "$module" == *"-java-"* ]]; then
                  uml_module="${module//-java-/-uml-}"
                else
                  uml_module="${module//kmp/uml}"
                fi

                echo "Creating UML version: $uml_module"

                # Create the UML module directory
                mkdir -p "$uml_module"

                # Copy only api_class_diagram.svg files from version folders
                for version_dir in "$module"/*/; do
                  if [ -d "$version_dir" ]; then
                    version_name=$(basename "$version_dir")

                    # Skip special directories
                    if [[ "$version_name" == "_layouts" ]] || [[ "$version_name" == ".git" ]]; then
                      continue
                    fi

                    # Check if api_class_diagram.svg exists in this version
                    if [ -f "$version_dir/api_class_diagram.svg" ]; then
                      echo "Copying UML diagram for version: $version_name"
                      mkdir -p "$uml_module/$version_name"
                      cp "$version_dir/api_class_diagram.svg" "$uml_module/$version_name/"
                    fi
                  fi
                done

                # Copy and modify list_versions.md
                if [ -f "$module/list_versions.md" ]; then
                  echo "Copying and modifying list_versions.md..."
                  sed 's/\[API documentation\]([^)]*)<br>//g' "$module/list_versions.md" > "$uml_module/list_versions.md"
                fi

                echo "Finished processing $module -> $uml_module"
              fi
            fi
          done

          # Add all changes to git
          git add .

          # Commit UML changes if any
          if [[ -n $(git status --porcelain) ]]; then
            git commit -m "Generate UML documentation from updated modules"
            echo "UML documentation changes committed."
          else
            echo "No UML documentation changes to commit."
          fi

          echo "UML documentation processing completed."

      - name: Push changes to gh-pages
        if: env.changes_detected == 'true'
        run: |
          git push origin HEAD:gh-pages --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
